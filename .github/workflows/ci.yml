name: Predictive Maintenance CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: 3.9

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
        
    - name: Run linting
      run: |
        fflake8 src/ --max-line-length=100 --ignore=E203,W503,F401,E402,F824,F541,E501
        black --check src/ --line-length=100
        
    - name: Run unit tests
      run: |
        pytest test/ -v --cov=src --cov-report=xml --cov-report=term
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  build:
    name: Build and Test Docker
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t predictive-maintenance:${{ github.sha }} .
        
    - name: Test Docker container
      run: |
        docker run -d -p 8000:8000 --name test-container predictive-maintenance:${{ github.sha }}
        sleep 45
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        docker stop test-container
        docker rm test-container

  validate:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Success notification
      run: |
        echo "All CI/CD validations passed!"
        echo "Tests: PASSED"
        echo "Linting: PASSED" 
        echo "Docker Build: PASSED"
        echo "Container Health: PASSED"
        echo "Ready for production deployment"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"